{"version":3,"sources":["components/App.js","utils/api.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","evt","options","state","countries","map","item","name","toLowerCase","indexOf","target","value","push","setState","open","handleHeadClick","e","tagName","handleCountryClick","preventDefault","openModal","selected","innerHTML","handleClose","bind","assertThisInitialized","_this2","fetch","then","response","status","json","catch","console","log","res","_this3","react_default","a","createElement","className","onClick","style","height","type","placeholder","onChange","length","key","href","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gOAoGeA,qBA/Fb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAoBRQ,aAAe,SAACC,GACd,IAAIC,EAAU,GACdT,EAAKU,MAAMC,UAAUC,IAAI,SAAAC,GACnBA,EAAKC,KAAKC,cAAcC,QAAQR,EAAIS,OAAOC,MAAMH,gBAAkB,GACrEN,EAAQU,KAAKN,KAGjBb,EAAKoB,SAAS,CAACX,QAASA,IAExB,IAAIY,IAASb,EAAIS,OAAOC,MACxBlB,EAAKoB,SAAS,CACZC,KAAMA,KAhCSrB,EAoCnBsB,gBAAkB,SAACC,GACjB,MAA2B,UAApBA,EAAEN,OAAOO,QACdxB,EAAKoB,SAAS,CACZC,MAAM,IAEN,IAzCarB,EA4CnByB,mBAAqB,SAACF,GACpBA,EAAEG,iBACF1B,EAAKoB,SAAS,CACZO,WAAW,EACXC,SAAUL,EAAEN,OAAOY,aAhDJ7B,EAoDnB8B,YAAc,WACZ9B,EAAKoB,SAAS,CACZO,WAAW,KAnDb3B,EAAKU,MAAQ,CACXC,UAAW,GACXF,QAAS,GACTY,MAAM,EACNM,WAAW,EACXC,SAAU,IAEZ5B,EAAKO,aAAeP,EAAKO,aAAawB,KAAlB9B,OAAA+B,EAAA,EAAA/B,QAAA+B,EAAA,EAAA/B,CAAAD,KAVHA,mFAaC,IAAAiC,EAAA9B,KCfX+B,MAHK,wCAIPC,KAAK,SAAAC,GAAQ,OAAwB,MAApBA,EAASC,OACrBD,EAASE,OACT,KACLC,MAAM,SAAAhB,GAAC,OAAIiB,QAAQC,IAAIlB,KDYbY,KAAK,SAAAO,GAClBT,EAAKb,SAAS,CACZT,UAAW+B,uCA0CR,IAAAC,EAAAxC,KACP,OACEyC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,aAAaC,QAAS7C,KAAKmB,iBAC3CsB,EAAAC,EAAAC,cAAA,OAAKG,MAAO,CAACC,OAAQ,SACnBN,EAAAC,EAAAC,cAAA,SACEC,UAAU,QACVI,KAAK,OACLC,YAAY,yBACZC,SAAUlD,KAAKI,eAEhBJ,KAAKO,MAAMW,MACVuB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,YACK3C,KAAKO,MAAMD,QAAQ6C,QACpBnD,KAAKO,MAAMD,QAAQG,IAAI,SAAAC,GACrB,OAAQ+B,EAAAC,EAAAC,cAAA,MAAIS,IAAK1C,EAAKC,MAAM8B,EAAAC,EAAAC,cAAA,KAAGU,KAAK,IAAIR,QAASL,EAAKlB,oBAAqBZ,EAAKC,WAMzFX,KAAKO,MAAMiB,WACViB,EAAAC,EAAAC,cAAA,OAAKW,GAAG,UAAUV,UAAU,SAC1BH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAQC,QAAS7C,KAAK2B,aAAtC,QACAc,EAAAC,EAAAC,cAAA,wBAAgB3C,KAAKO,MAAMkB,sBArF3B8B,cEQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,KAAK,SAAAqC,GACjCA,EAAaC","file":"static/js/main.debc525e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport { getCountries } from '../utils/api';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      countries: [],\n      options: [],\n      open: false,\n      openModal: false,\n      selected: \"\"\n    };\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n  componentDidMount() {\n    getCountries().then(res => {\n      this.setState({\n        countries: res\n      });\n    })\n  }\n\n  handleChange = (evt) => {\n    let options = [];\n    this.state.countries.map(item => {\n      if (item.name.toLowerCase().indexOf(evt.target.value.toLowerCase()) > -1) {\n        options.push(item)\n      }\n    });\n    this.setState({options: options})\n\n    let open = !!evt.target.value;\n    this.setState({\n      open: open\n    });\n  };\n\n  handleHeadClick = (e) => {\n    return e.target.tagName == \"HEADER\" ? (\n      this.setState({\n        open: false\n      })\n    ) : \"\"\n  };\n\n  handleCountryClick = (e) => {\n    e.preventDefault();\n    this.setState({\n      openModal: true,\n      selected: e.target.innerHTML,\n    });\n  };\n\n  handleClose = () => {\n    this.setState({\n      openModal: false\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\" onClick={this.handleHeadClick}>\n          <div style={{height: \"50px\"}}>\n            <input\n              className=\"input\"\n              type=\"text\"\n              placeholder='Type to search country'\n              onChange={this.handleChange}\n            />\n            {this.state.open && (\n              <div className=\"container\">\n                <ul>\n                  {!!this.state.options.length && (\n                    this.state.options.map(item => {\n                      return (<li key={item.name}><a href=\"#\" onClick={this.handleCountryClick}>{item.name}</a></li>)\n                    })\n                  )}\n              </ul>\n              </div>\n            )}\n            {this.state.openModal && (\n              <div id=\"myModal\" className=\"modal\">\n                <div className=\"modal-content\">\n                  <span className=\"close\" onClick={this.handleClose}>&times;</span>\n                  <p>Wellcome to {this.state.selected}</p>\n                </div>\n              </div>\n            )}\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const API_URL = 'https://restcountries.eu/rest/v2/all';\n\nexport const getCountries = () => {\n    return fetch(API_URL)\n        .then(response => response.status === 200\n            ? response.json()\n            : [])\n        .catch(e => console.log(e));\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}